{"ast":null,"code":"var _jsxFileName = \"D:\\\\projects\\\\aquatron\\\\aquatronics\\\\aquatron-frontend\\\\src\\\\components\\\\ObjectTable.jsx\";\nimport React from 'react';\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper } from '@mui/material';\n\n// Renders an object or array as a table, recursively\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ObjectTable = ({\n  data\n}) => {\n  if (!data) return /*#__PURE__*/_jsxDEV(\"span\", {\n    children: \"No data\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 21\n  }, this);\n\n  // If array of objects (e.g. elements, vout_table)\n  if (Array.isArray(data) && data.length > 0 && typeof data[0] === 'object') {\n    const headers = Object.keys(data[0]);\n    return /*#__PURE__*/_jsxDEV(TableContainer, {\n      component: Paper,\n      sx: {\n        maxWidth: 500,\n        mb: 1\n      },\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        size: \"small\",\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: headers.map(key => /*#__PURE__*/_jsxDEV(TableCell, {\n              children: key\n            }, key, false, {\n              fileName: _jsxFileName,\n              lineNumber: 18,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 16,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: data.map((row, i) => /*#__PURE__*/_jsxDEV(TableRow, {\n            children: headers.map(key => {\n              var _row$key$toString, _row$key;\n              return /*#__PURE__*/_jsxDEV(TableCell, {\n                children: typeof row[key] === 'object' && row[key] !== null ? /*#__PURE__*/_jsxDEV(ObjectTable, {\n                  data: row[key]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 28,\n                  columnNumber: 25\n                }, this) : (_row$key$toString = (_row$key = row[key]) === null || _row$key === void 0 ? void 0 : _row$key.toString()) !== null && _row$key$toString !== void 0 ? _row$key$toString : ''\n              }, key, false, {\n                fileName: _jsxFileName,\n                lineNumber: 26,\n                columnNumber: 19\n              }, this);\n            })\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this);\n  }\n\n  // If plain object\n  if (typeof data === 'object' && !Array.isArray(data)) {\n    return /*#__PURE__*/_jsxDEV(TableContainer, {\n      component: Paper,\n      sx: {\n        maxWidth: 500,\n        mb: 1\n      },\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        size: \"small\",\n        children: /*#__PURE__*/_jsxDEV(TableBody, {\n          children: Object.entries(data).map(([key, value]) => {\n            var _value$toString;\n            return /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                children: key\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 48,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: typeof value === 'object' && value !== null ? /*#__PURE__*/_jsxDEV(ObjectTable, {\n                  data: value\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 51,\n                  columnNumber: 23\n                }, this) : (_value$toString = value === null || value === void 0 ? void 0 : value.toString()) !== null && _value$toString !== void 0 ? _value$toString : ''\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 49,\n                columnNumber: 17\n              }, this)]\n            }, key, true, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 15\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Fallback for primitives\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    children: data.toString()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 10\n  }, this);\n};\n_c = ObjectTable;\nexport default ObjectTable;\nvar _c;\n$RefreshReg$(_c, \"ObjectTable\");","map":{"version":3,"names":["React","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","jsxDEV","_jsxDEV","ObjectTable","data","children","fileName","_jsxFileName","lineNumber","columnNumber","Array","isArray","length","headers","Object","keys","component","sx","maxWidth","mb","size","map","key","row","i","_row$key$toString","_row$key","toString","entries","value","_value$toString","_c","$RefreshReg$"],"sources":["D:/projects/aquatron/aquatronics/aquatron-frontend/src/components/ObjectTable.jsx"],"sourcesContent":["import React from 'react';\r\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper } from '@mui/material';\r\n\r\n\r\n// Renders an object or array as a table, recursively\r\nconst ObjectTable = ({ data }) => {\r\n  if (!data) return <span>No data</span>;\r\n\r\n  // If array of objects (e.g. elements, vout_table)\r\n  if (Array.isArray(data) && data.length > 0 && typeof data[0] === 'object') {\r\n    const headers = Object.keys(data[0]);\r\n    return (\r\n      <TableContainer component={Paper} sx={{ maxWidth: 500, mb: 1 }}>\r\n        <Table size=\"small\">\r\n          <TableHead>\r\n            <TableRow>\r\n              {headers.map((key) => (\r\n                <TableCell key={key}>{key}</TableCell>\r\n              ))}\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {data.map((row, i) => (\r\n              <TableRow key={i}>\r\n                {headers.map((key) => (\r\n                  <TableCell key={key}>\r\n                    {typeof row[key] === 'object' && row[key] !== null\r\n                      ? <ObjectTable data={row[key]} />\r\n                      : row[key]?.toString() ?? ''}\r\n                  </TableCell>\r\n                ))}\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    );\r\n  }\r\n\r\n  // If plain object\r\n  if (typeof data === 'object' && !Array.isArray(data)) {\r\n    return (\r\n      <TableContainer component={Paper} sx={{ maxWidth: 500, mb: 1 }}>\r\n        <Table size=\"small\">\r\n          <TableBody>\r\n            {Object.entries(data).map(([key, value]) => (\r\n              <TableRow key={key}>\r\n                <TableCell>{key}</TableCell>\r\n                <TableCell>\r\n                  {typeof value === 'object' && value !== null\r\n                    ? <ObjectTable data={value} />\r\n                    : value?.toString() ?? ''}\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    );\r\n  }\r\n\r\n  // Fallback for primitives\r\n  return <span>{data.toString()}</span>;\r\n};\r\n\r\nexport default ObjectTable;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}